{"version":3,"sources":["services/song.service.ts","components/Song.tsx","components/AddSongModal.tsx","components/SongList.tsx","services/audio.service.ts","components/Audio.tsx","components/EditSongModal.tsx","components/SongInfo.tsx","components/NotFound404.tsx","App.tsx","index.tsx"],"names":["SERVER_URL","window","location","hostname","getSong","id","Promise","resolve","reject","a","axios","get","response","song","data","postSong","post","songId","editSong","put","deleteSong","delete","editYouTubeLink","link","splittedLink","split","youtubeId","length","youtubeEmbededLink","console","log","getDifficultyColor","difficulty","Song","history","useHistory","ListItem","button","onClick","push","style","borderLeft","borderRadius","background","width","maxWidth","boxShadow","color","height","overflow","fontSize","name","BootstrapInput","withStyles","theme","createStyles","root","marginTop","spacing","input","position","backgroundColor","palette","paper","border","padding","transition","transitions","create","fontFamily","join","borderColor","InputBase","AddSongModal","updateList","closeModal","openSnackbar","useState","inputValue","setInputValue","sliderValue","setSliderValue","isMaxInputLength","setIsMaxInputLength","isInputEmpty","setIsInputEmpty","isLoading","setIsLoading","handleSubmit","event","preventDefault","display","flexDirection","justifyContent","alignItems","onSubmit","FormControl","marginLeft","InputLabel","value","onChange","nativeEvent","inputType","target","Slider","newValue","max","min","valueLabelDisplay","Button","type","letterSpacing","fontWeight","LinearProgress","Alert","props","elevation","variant","Songs","songs","setSongs","error","setError","isModalOpen","setIsModalOpen","isSnackbarOpen","setIsSnackbarOpen","useEffect","setData","message","prevSongs","closeSnackbar","AddModal","React","forwardRef","ref","className","CircularProgress","size","thickness","Fab","aria-label","List","component","map","Modal","open","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","severity","getAudioStatus","exists","status","getAudioLink","postAudio","audioFile","formData","FormData","append","deleteAudio","useStyles","makeStyles","wrapper","margin","buttonSuccess","green","fabProgress","top","left","zIndex","Audio","setIsDeleting","classes","audioExists","setAudioExists","setAudioFile","isUploadDisabled","setIsUploadDisabled","isValidateModalOpen","setIsValidateModalOpen","loading","setLoading","success","setSuccess","timer","useRef","buttonClassname","clsx","getData","handleUpload","current","setTimeout","undefined","handleDeleteAudio","closeValidateModal","borderBottom","borderTop","textAlign","controls","outline","src","htmlFor","accept","files","disabled","EditSongModal","updatePage","nameInputValue","setNameInputValue","linkInputValue","setLinkInputValue","isMaxNameInputLength","setIsMaxNameInputLength","isNameInputEmpty","setIsNameInputEmpty","isMaxLinkInputLength","setIsMaxLinkInputLength","Number","SongInfo","match","setSong","songLink","setSongLink","isDeleting","isEditModalOpen","setIsEditModalOpen","params","handleDeleteSong","closeEditModal","EditModal","IconButton","title","allow","allowFullScreen","marginBottom","NotFound404","App","path","exact","SongList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcab9e54.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport ISong from '../models/ISong';\r\n\r\nconst SERVER_URL = `http://${window.location.hostname}:8000`;\r\n\r\nconst getSongs = (): Promise<ISong[]> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try \r\n        {\r\n            let response = await axios.get<ISong[]>(`${SERVER_URL}/Songs`);\r\n            let songs: ISong[] = response.data;\r\n            resolve(songs);\r\n        }\r\n        catch (ex)\r\n        {\r\n            reject(ex);\r\n        } \r\n    })\r\n}\r\n\r\nconst getSong = (id: string): Promise<ISong> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try\r\n        {\r\n            let response = await axios.get<ISong>(`${SERVER_URL}/Song/${id}`)\r\n            let song: ISong = response.data;\r\n            resolve(song);\r\n        }\r\n        catch (ex) \r\n        {\r\n            reject(ex);\r\n        }\r\n    })\r\n}\r\n\r\nconst postSong = (song: ISong): Promise<number> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try \r\n        {\r\n            let response = await axios.post(`${SERVER_URL}/Song`, song);\r\n            let songId: number = response.data.id;\r\n            resolve(songId);\r\n        }\r\n        catch (ex)\r\n        {\r\n            reject(ex);\r\n        }\r\n    })\r\n}\r\n\r\nconst editSong = (song: ISong): Promise<string> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try \r\n        {\r\n            await axios.put(`${SERVER_URL}/Song`, song);\r\n            resolve('OK')\r\n        }\r\n        catch (ex)\r\n        {\r\n            reject(ex);\r\n        }\r\n    })\r\n}\r\n\r\nconst deleteSong = (id: string): Promise<string> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try \r\n        {\r\n            await axios.delete(`${SERVER_URL}/Song/${id}`);\r\n            resolve('OK');\r\n        }\r\n        catch (ex)\r\n        {\r\n            reject(ex);\r\n        }\r\n    })\r\n}\r\n\r\nconst editYouTubeLink = (link: string): string => {\r\n    let splittedLink: string[] = link.split('/');\r\n    let youtubeId = splittedLink[splittedLink.length - 1]\r\n    let youtubeEmbededLink = `https://www.youtube.com/embed/${youtubeId}`;\r\n    console.log(youtubeEmbededLink);\r\n    return youtubeEmbededLink;\r\n}\r\n\r\nconst getDifficultyColor = (difficulty: number): string => {\r\n    switch (difficulty) {\r\n        case 1:\r\n            return '#30e369';\r\n        case 2:\r\n            return '#c2e330';\r\n        case 3:\r\n            return '#f7f020';\r\n        case 4:\r\n            return '#30e3d1';\r\n        case 5:\r\n            return '#30aae3';\r\n        case 6:\r\n            return '#305de3';\r\n        case 7:\r\n            return '#6630e3';\r\n        case 8:\r\n            return '#da30e3';\r\n        case 9:\r\n            return '#e3308c';\r\n        case 10:\r\n            return '#e33030';\r\n        default:\r\n            return '#000000';\r\n    }\r\n}\r\n \r\n\r\nexport {\r\n    getSongs,\r\n    getSong,\r\n    postSong,\r\n    editSong,\r\n    deleteSong,\r\n    editYouTubeLink,\r\n    getDifficultyColor\r\n}","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ISong from '../models/ISong';\r\nimport { getDifficultyColor } from '../services/song.service';\r\n\r\ninterface SongProps {\r\n    song: ISong;\r\n}\r\n\r\nconst Song: React.FC<SongProps> = ({ song }: SongProps) => {\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <ListItem button onClick={ () => history.push(`/song/${song.id}`) } \r\n        style={{ \r\n            borderLeft: `solid 5px ${ getDifficultyColor(song.difficulty) }`,\r\n            borderRadius: 3,\r\n            background: '#2e333b',\r\n            width: '95vw',\r\n            maxWidth: 360,\r\n            boxShadow: '5px 5px 2px 0px rgba(0,0,0,0.75)',\r\n            color: 'white',\r\n            height: 50\r\n        }}>\r\n            <p style={{ overflow: 'hidden', fontSize: 20 }} >{ song.name }</p>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default Song\r\n","import React, { useState } from 'react';\r\nimport { createStyles, withStyles, Theme } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport  { postSong } from '../services/song.service';\r\nimport ISong from '../models/ISong';\r\n\r\nconst BootstrapInput = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      // Use the system font instead of the default Roboto font.\r\n      fontFamily: [\r\n        '-apple-system',\r\n        'BlinkMacSystemFont',\r\n        '\"Segoe UI\"',\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n        '\"Apple Color Emoji\"',\r\n        '\"Segoe UI Emoji\"',\r\n        '\"Segoe UI Symbol\"',\r\n      ].join(','),\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#80bdff',\r\n        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n      },\r\n    },\r\n  }),\r\n)(InputBase);\r\n\r\ninterface AddSongModalProps {\r\n    updateList: Function;\r\n    closeModal: Function;\r\n    openSnackbar: Function;\r\n}\r\n\r\nconst AddSongModal: React.FC<AddSongModalProps> = ({ updateList, closeModal, openSnackbar }: AddSongModalProps) => {\r\n\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n    const [sliderValue, setSliderValue] = useState<number>(10);\r\n    const [isMaxInputLength, setIsMaxInputLength] = useState<boolean>(false);\r\n    const [isInputEmpty, setIsInputEmpty] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n    const handleSlider = (event: any, newValue: number | number[]) => {\r\n        setSliderValue(newValue as number);\r\n    };\r\n\r\n    const handleInput = (event: any) => {\r\n\r\n        setIsInputEmpty(false);\r\n\r\n        if (inputValue.length < 50 || event.nativeEvent.inputType === 'deleteContentBackward') {\r\n            setIsMaxInputLength(false);\r\n            setInputValue(event.target.value);\r\n        }\r\n        else {\r\n            setIsMaxInputLength(true);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event: any) => {\r\n        event.preventDefault();\r\n        \r\n        if (inputValue.length === 0) {\r\n            setIsInputEmpty(true);\r\n        }\r\n        else {\r\n            setIsLoading(true);\r\n\r\n            try {\r\n\r\n                let song: ISong = {\r\n                    name: inputValue,\r\n                    difficulty: sliderValue\r\n                }\r\n\r\n                let songId: number = await postSong(song);\r\n                song.id = songId;\r\n\r\n                updateList(song);\r\n                closeModal();\r\n                openSnackbar();\r\n            }\r\n            catch (ex) {\r\n                console.log(ex);\r\n            }\r\n            finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ \r\n            height: '100%', \r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'space-between',\r\n        }}>\r\n            <form onSubmit={ handleSubmit }>\r\n                <FormControl style={{\r\n                    marginTop: '20px',\r\n                    width: '90%',\r\n                    marginLeft: '5%'\r\n                }}>\r\n                    <InputLabel style={{ color: 'white' }}>Song Name</InputLabel>\r\n                    <BootstrapInput value={ inputValue } onChange={ handleInput } />\r\n                    { isMaxInputLength && <p style={{ color: 'red', fontSize: 12 }}>Max Length reached</p> }\r\n                    { isInputEmpty && <p style={{ color: 'red', fontSize: 12 }}>Input Box is Empty</p> }\r\n                </FormControl>\r\n                <div style={{\r\n                    marginTop: '50px',\r\n                    width: '90%',\r\n                    marginLeft: '5%',\r\n                }}>\r\n                    <p style={{ \r\n                        color: 'white',\r\n                        fontSize: '12px',\r\n                        fontFamily: 'sans-serif'\r\n                    }}>Difficulty</p>\r\n                    <Slider value={sliderValue} onChange={ handleSlider } max={10} min={1} color='secondary' valueLabelDisplay='on' />\r\n                </div>\r\n                <Button type='submit' style={{\r\n                    background: 'linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%)',\r\n                    width: '90%',\r\n                    marginLeft: '5%',\r\n                    marginTop: '50px',\r\n                    letterSpacing: 10,\r\n                    fontWeight: 'bold'\r\n                }}>\r\n                    CREATE\r\n                </Button>\r\n            </form>\r\n            { isLoading && <LinearProgress color='secondary' /> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddSongModal\r\n","import React, { useEffect, useState } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport List from '@material-ui/core/List';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport ISong from '../models/ISong';\r\nimport { getSongs } from '../services/song.service';\r\nimport Song from './Song';\r\nimport AddSongModal from './AddSongModal';\r\nimport './SongList.css';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst Songs: React.FC = () => {\r\n\r\n    const [songs, setSongs] = useState<ISong[]>([])\r\n    const [isLoading, setIsLoading] = useState<boolean>(true)\r\n    const [error, setError] = useState();\r\n    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n    const [isSnackbarOpen, setIsSnackbarOpen] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        setData();\r\n    }, [])\r\n\r\n    const setData = async () => {\r\n        try \r\n        {\r\n            let songs: ISong[] = await getSongs();\r\n            setSongs(songs);\r\n        }\r\n        catch (ex) \r\n        {\r\n            setError(ex.message);\r\n        }\r\n        finally \r\n        {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    const updateList = (song: ISong) => {\r\n        setSongs((prevSongs: ISong[]) => [song, ...prevSongs]);\r\n    }\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    }\r\n\r\n    const openSnackbar = () => {\r\n        setIsSnackbarOpen(true);\r\n    }\r\n\r\n    const closeSnackbar = () => {\r\n        setIsSnackbarOpen(false);\r\n    }\r\n\r\n    const AddModal = React.forwardRef((props, ref) => <AddSongModal updateList={ updateList } closeModal={ closeModal } openSnackbar={ openSnackbar }/> );\r\n\r\n    return (\r\n        <div className='container'>\r\n            { isLoading && \r\n            <div className='loader-wrapper'>\r\n                <CircularProgress variant='indeterminate' size={100} thickness={1} />\r\n            </div> }\r\n            { error && <p style={{ color: 'white' }}>{ error }</p> }\r\n            { songs && \r\n            <div className='content-wrapper'>\r\n                <div className='create-button-wrapper'>\r\n                    <Fab color=\"secondary\" aria-label=\"add\" onClick={ openModal } >\r\n                        <AddIcon />\r\n                    </Fab>\r\n                </div>\r\n                <List component='nav' aria-label=\"mailbox folders\">\r\n                    { songs.map((song: ISong) => (\r\n                        <div key={ song.id } className='song'>\r\n                            <Song song={ song }/>\r\n                        </div>\r\n                    ))}\r\n                </List>\r\n                <Modal \r\n                    open={ isModalOpen }\r\n                    onClose={ closeModal }\r\n                    className='create-song-modal'\r\n                    closeAfterTransition\r\n                    BackdropComponent={ Backdrop }\r\n                    BackdropProps={{ timeout: 500 }}\r\n                >\r\n                    <Fade in={ isModalOpen }>\r\n                        <AddModal />\r\n                    </Fade>\r\n                </Modal>\r\n                <Snackbar open={ isSnackbarOpen } anchorOrigin={{ vertical: 'bottom', horizontal: 'left',}} autoHideDuration={ 3000 } onClose={ closeSnackbar }>\r\n                    <Alert onClose={ closeSnackbar } severity=\"success\">\r\n                        Added Song\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Songs\r\n","import axios from 'axios';\r\n\r\nconst SERVER_URL = `http://${window.location.hostname}:8000`;\r\n\r\nconst getAudioStatus = (id: string): Promise<boolean> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try \r\n        {\r\n            let response = await axios.get(`${SERVER_URL}/Audio/${id}/Exists`);\r\n            let exists: boolean = response.data.status;\r\n            resolve(exists);\r\n        }\r\n        catch (ex)\r\n        {\r\n            reject(ex);\r\n        } \r\n    })\r\n}\r\n\r\nconst getAudioLink = (id: string): string => {\r\n    return `${SERVER_URL}/Audio/${id}`;\r\n}\r\n\r\nconst postAudio = (id: string, audioFile: File): Promise<string> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try \r\n        {\r\n            const formData: FormData = new FormData();\r\n            formData.append('file', audioFile, audioFile.name);\r\n            await axios.post(`${SERVER_URL}/Audio/${id}`, formData)\r\n            resolve('OK')\r\n        }\r\n        catch (ex) \r\n        {\r\n            reject(ex);\r\n        }\r\n    })\r\n}\r\n\r\nconst deleteAudio = (id: string): Promise<string> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try \r\n        {\r\n            await axios.delete(`${SERVER_URL}/Audio/${id}`);\r\n            resolve('OK');\r\n        }\r\n        catch (ex)\r\n        {\r\n            reject(ex);\r\n        }\r\n    })\r\n}\r\n\r\nexport {\r\n    getAudioStatus,\r\n    getAudioLink,\r\n    postAudio,\r\n    deleteAudio\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport clsx from 'clsx';\r\nimport { getAudioLink, getAudioStatus, postAudio, deleteAudio } from '../services/audio.service';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    wrapper: {\r\n      margin: theme.spacing(1),\r\n      position: 'relative',\r\n    },\r\n    buttonSuccess: {\r\n      backgroundColor: green[500],\r\n      '&:hover': {\r\n        backgroundColor: green[700],\r\n      },\r\n    },\r\n    fabProgress: {\r\n      color: green[500],\r\n      position: 'absolute',\r\n      top: -6,\r\n      left: -6,\r\n      zIndex: 1,\r\n    }\r\n  }),\r\n);\r\n\r\ninterface AudioProps {\r\n    id: string;\r\n    setIsDeleting: Function;\r\n}\r\n\r\nconst Audio: React.FC<AudioProps> = ({ id, setIsDeleting }: AudioProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [audioExists, setAudioExists] = useState<boolean>();\r\n    const [audioFile, setAudioFile] = useState<File>();\r\n    const [isUploadDisabled, setIsUploadDisabled] = useState<boolean>(true);\r\n    const [isValidateModalOpen, setIsValidateModalOpen] = useState<boolean>(false);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [success, setSuccess] = useState<boolean>(false);\r\n    const [error, setError] = useState<string>();\r\n    const timer = React.useRef<number>();\r\n    \r\n    const buttonClassname = clsx({\r\n        [classes.buttonSuccess]: success,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const getData = async () => {\r\n        try {\r\n            let exists: boolean = await getAudioStatus(id);\r\n            if (exists) { \r\n                setAudioExists(true);\r\n            }\r\n        }\r\n        catch (ex) {\r\n            setError(ex.message);\r\n        } \r\n    }\r\n\r\n    const handleAudioInput = (event: any) => {\r\n        let audioFile: File = event.target.files[0];\r\n        setAudioFile(audioFile);\r\n        setIsUploadDisabled(false);\r\n    }\r\n\r\n    const handleUpload = async () => {\r\n        try\r\n        {\r\n            setSuccess(false);\r\n            setLoading(true);\r\n\r\n            await postAudio(id, audioFile!);\r\n\r\n            setSuccess(true);\r\n            timer.current = window.setTimeout(() => {\r\n                setAudioExists(true);\r\n            }, 1000);\r\n        }\r\n        catch (ex)\r\n        {\r\n            setError(ex.message);\r\n            setAudioFile(undefined);\r\n            setIsUploadDisabled(true);\r\n        }\r\n        finally \r\n        {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const handleDeleteAudio = async () => {\r\n        try {\r\n            closeValidateModal();\r\n            setIsDeleting(true);\r\n\r\n            await deleteAudio(id);\r\n            \r\n            setAudioFile(undefined);\r\n            setIsUploadDisabled(true);\r\n            setSuccess(false);\r\n            setAudioExists(false);\r\n        }\r\n        catch (ex) {\r\n            setError(ex.message);\r\n        }\r\n        finally {\r\n            setIsDeleting(false);\r\n        }\r\n    }\r\n\r\n    const openValidateModal = () => {\r\n        setIsValidateModalOpen(true);\r\n    }\r\n\r\n    const closeValidateModal = () => {\r\n        setIsValidateModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div style={{ borderBottom: '1px solid white', borderTop: '1px solid white', padding: '20px 0' }}>\r\n            { error && <div style={{ textAlign: 'center' }}><p style={{ color: 'white' }}>{ error }</p></div> }\r\n            { audioExists ? \r\n            <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                <audio controls style={{ outline: 'none' }}>\r\n                    <source src={ getAudioLink(id) } type=\"audio/mp4\" />\r\n                </audio>\r\n                <Fab color=\"secondary\" aria-label=\"delete\" onClick={ openValidateModal }>\r\n                    <DeleteIcon />\r\n                </Fab>\r\n            </div>\r\n            :\r\n            <div style={{ \r\n                padding: '0px 10px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'space-between'\r\n            }}>\r\n                <label htmlFor=\"upload-button\">\r\n                    <input id=\"upload-button\" name=\"upload-button\" style={{ display: 'none' }} type=\"file\" accept=\"audio/*\" onChange={ handleAudioInput } />\r\n                    <Button className=\"btn-choose\" color=\"primary\" variant=\"contained\" component=\"span\">Choose Audio</Button>\r\n                </label>\r\n                <div className={classes.wrapper}>\r\n                    <Fab\r\n                        aria-label=\"save\"\r\n                        color=\"primary\"\r\n                        className={ buttonClassname }\r\n                        onClick={ handleUpload }\r\n                        disabled={ isUploadDisabled }\r\n                    >\r\n                        { success ? <CheckIcon /> : <ArrowUpwardIcon /> }\r\n                    </Fab>\r\n                    { loading && <CircularProgress size={68} className={classes.fabProgress} /> }\r\n                </div>\r\n            </div>\r\n        }\r\n         <Modal \r\n                open={ isValidateModalOpen }\r\n                onClose={ closeValidateModal }\r\n                className='validate-modal'\r\n                closeAfterTransition\r\n                BackdropComponent={ Backdrop }\r\n                BackdropProps={{ timeout: 500 }}\r\n            >\r\n                <Fade in={ isValidateModalOpen }>\r\n                    <div style={{\r\n                        outline: 'none',\r\n                        height: '100%',\r\n                        color: 'white',\r\n                        textAlign: 'center',\r\n                        padding: 10,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-between'\r\n                    }}>\r\n                        <h2>Are sure you want to <b>DELETE</b> this Audio ?</h2>\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-around'\r\n                        }}>\r\n                            <Button color='secondary' onClick={ handleDeleteAudio }>DELETE</Button>\r\n                            <Button color='primary' onClick={ closeValidateModal }>CANCEL</Button>\r\n                        </div>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Audio\r\n","import React, { useState, useEffect } from 'react';\r\nimport { createStyles, withStyles, Theme } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport  { editSong, editYouTubeLink } from '../services/song.service';\r\nimport ISong from '../models/ISong';\r\n\r\nconst BootstrapInput = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      // Use the system font instead of the default Roboto font.\r\n      fontFamily: [\r\n        '-apple-system',\r\n        'BlinkMacSystemFont',\r\n        '\"Segoe UI\"',\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n        '\"Apple Color Emoji\"',\r\n        '\"Segoe UI Emoji\"',\r\n        '\"Segoe UI Symbol\"',\r\n      ].join(','),\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#80bdff',\r\n        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n      },\r\n    },\r\n  }),\r\n)(InputBase);\r\n\r\ninterface EditSongModalProps {\r\n    song: ISong;\r\n    songId: string;\r\n    closeModal: Function;\r\n    openSnackbar: Function\r\n    updatePage: Function;\r\n}\r\n\r\nconst EditSongModal: React.FC<EditSongModalProps> = ({ song, songId, closeModal, openSnackbar, updatePage }: EditSongModalProps) => {\r\n\r\n    const [nameInputValue, setNameInputValue] = useState<string>('');\r\n    const [linkInputValue, setLinkInputValue] = useState<string>('');\r\n    const [sliderValue, setSliderValue] = useState<number>(10);\r\n    const [isMaxNameInputLength, setIsMaxNameInputLength] = useState<boolean>(false);\r\n    const [isNameInputEmpty, setIsNameInputEmpty] = useState<boolean>(false);\r\n    const [isMaxLinkInputLength, setIsMaxLinkInputLength] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        setNameInputValue(song.name);\r\n        setSliderValue(song.difficulty);\r\n        if (song.link) {\r\n            setLinkInputValue(song.link);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const handleSlider = (event: any, newValue: number | number[]) => {\r\n        setSliderValue(newValue as number);\r\n    };\r\n\r\n    const handleNameInput = (event: any) => {\r\n\r\n        setIsNameInputEmpty(false);\r\n\r\n        if (nameInputValue.length < 50 || event.nativeEvent.inputType === 'deleteContentBackward') {\r\n            setIsMaxNameInputLength(false);\r\n            setNameInputValue(event.target.value);\r\n        }\r\n        else {\r\n            setIsMaxNameInputLength(true);\r\n        }\r\n    }\r\n\r\n    const handleLinkInput = (event: any) => {\r\n\r\n        if (linkInputValue.length < 255 || event.nativeEvent.inputType === 'deleteContentBackward') {\r\n            setIsMaxLinkInputLength(false);\r\n            setLinkInputValue(event.target.value);\r\n        }\r\n        else {\r\n            setIsMaxLinkInputLength(true);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event: any) => {\r\n        event.preventDefault();\r\n        \r\n        if (nameInputValue.length === 0) {\r\n            setIsNameInputEmpty(true);\r\n        }\r\n        else {\r\n            setIsLoading(true);\r\n\r\n            let song: ISong = {\r\n                id: Number(songId),\r\n                name: nameInputValue,\r\n                difficulty: sliderValue,\r\n                link: linkInputValue ? editYouTubeLink(linkInputValue) : ''\r\n            }\r\n\r\n            try {\r\n                await editSong(song);\r\n                updatePage(song);\r\n                closeModal();\r\n                openSnackbar();\r\n            }\r\n            catch (ex) {\r\n                console.log(ex);\r\n            }\r\n            finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ \r\n            height: '100%', \r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'space-between',\r\n        }}>\r\n            <form onSubmit={ handleSubmit }>\r\n                <FormControl style={{\r\n                    marginTop: '20px',\r\n                    width: '90%',\r\n                    marginLeft: '5%'\r\n                }}>\r\n                    <InputLabel style={{ color: 'white' }}>Song Name</InputLabel>\r\n                    <BootstrapInput value={ nameInputValue } onChange={ handleNameInput } />\r\n                    { isMaxNameInputLength && <p style={{ color: 'red', fontSize: 12 }}>Max Length reached</p> }\r\n                    { isNameInputEmpty && <p style={{ color: 'red', fontSize: 12 }}>Input Box is Empty</p> }\r\n                </FormControl>\r\n                <FormControl style={{\r\n                    marginTop: '20px',\r\n                    width: '90%',\r\n                    marginLeft: '5%'\r\n                }}>\r\n                    <InputLabel style={{ color: 'white' }}>Youtube Link</InputLabel>\r\n                    <BootstrapInput value={ linkInputValue } onChange={ handleLinkInput } />\r\n                    { isMaxLinkInputLength && <p style={{ color: 'red', fontSize: 12 }}>Max Length reached</p> }\r\n                </FormControl>\r\n                <div style={{\r\n                    marginTop: '50px',\r\n                    width: '90%',\r\n                    marginLeft: '5%',\r\n                }}>\r\n                    <p style={{ \r\n                        color: 'white',\r\n                        fontSize: '12px'\r\n                    }}>Difficulty</p>\r\n                    <Slider value={ sliderValue } onChange={ handleSlider } max={10} min={1} color='primary' valueLabelDisplay='on' />\r\n                </div>\r\n                <Button type='submit' style={{\r\n                    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\r\n                    width: '90%',\r\n                    marginLeft: '5%',\r\n                    marginTop: '50px',\r\n                    letterSpacing: 10,\r\n                    fontWeight: 'bold'\r\n                }}>\r\n                    EDIT\r\n                </Button>\r\n            </form>\r\n            { isLoading && <LinearProgress color='primary' /> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditSongModal","import React, { useEffect, useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport Audio from './Audio';\r\nimport EditSongModal from './EditSongModal';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getSong, deleteSong, getDifficultyColor } from '../services/song.service';\r\nimport ISong from '../models/ISong';\r\nimport './SongInfo.css';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\ninterface RouteParams { \r\n    id: string \r\n}\r\n\r\nconst SongInfo = ({ match }: RouteComponentProps<RouteParams>) => {\r\n    \r\n    const history = useHistory();\r\n\r\n    const [song, setSong] = useState<ISong>();\r\n    const [songLink, setSongLink] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [isDeleting, setIsDeleting] = useState<boolean>(false);\r\n    const [error, setError] = useState<string>();\r\n    const [isEditModalOpen, setIsEditModalOpen] = useState<boolean>(false);\r\n    const [isValidateModalOpen, setIsValidateModalOpen] = useState<boolean>(false);\r\n    const [isSnackbarOpen, setIsSnackbarOpen] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            try \r\n            {\r\n                let songId: string = match.params.id;\r\n\r\n                let song: ISong = await getSong(songId);\r\n                setSong(song);\r\n\r\n                if (song.link) {\r\n                    setSongLink(song.link);\r\n                }\r\n            }\r\n            catch (ex) \r\n            {\r\n                setError(ex.message);\r\n            }\r\n            finally\r\n            {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n\r\n        getData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    \r\n\r\n    const handleDeleteSong = async () => {\r\n        try {\r\n            closeValidateModal();\r\n            setIsDeleting(true);\r\n            await deleteSong(match.params.id);\r\n            history.push(`/songs`);\r\n        }\r\n        catch (ex) {\r\n            setError(ex.message);\r\n        }\r\n        finally {\r\n            setIsDeleting(false);\r\n        }\r\n    }\r\n\r\n    const updatePage = (song: ISong) => {\r\n        setSong(song);\r\n        setSongLink(song.link!);\r\n    }\r\n\r\n    const openEditModal = () => {\r\n        setIsEditModalOpen(true);\r\n    }\r\n\r\n    const closeEditModal = () => {\r\n        setIsEditModalOpen(false);\r\n    }\r\n\r\n    const openValidateModal = () => {\r\n        setIsValidateModalOpen(true);\r\n    }\r\n\r\n    const closeValidateModal = () => {\r\n        setIsValidateModalOpen(false);\r\n    }\r\n\r\n    const openSnackbar = () => {\r\n        setIsSnackbarOpen(true);\r\n    }\r\n\r\n    const closeSnackbar = () => {\r\n        setIsSnackbarOpen(false);\r\n    }\r\n\r\n    const EditModal = React.forwardRef((props, ref) => <EditSongModal song={ song! } songId={ match.params.id } closeModal={ closeEditModal } openSnackbar={ openSnackbar } updatePage={ updatePage } /> );\r\n\r\n    return (\r\n    <div className='song-info-container'>\r\n            { isLoading && \r\n            <div className='loader-wrapper'>\r\n                <CircularProgress variant='indeterminate' size={100} thickness={1} />\r\n            </div> }\r\n            { error && <div style={{ textAlign: 'center' }}><p style={{ color: 'white' }}>{ error }</p></div> }\r\n            { song &&\r\n                <div style={{ borderTop: `3px solid ${getDifficultyColor(song.difficulty)}` }}>\r\n                    { isDeleting && <LinearProgress color='secondary' /> }\r\n                    <IconButton aria-label=\"delete\" onClick={ () => history.push(`/songs`) } style={{ marginTop: '10px', marginLeft: '10px' }}>\r\n                        <ArrowBackIosIcon fontSize=\"large\" color=\"secondary\" />\r\n                    </IconButton>\r\n                    <div className='name-wrapper'>\r\n                        <h2>{ song.name }</h2>\r\n                    </div> \r\n                </div> \r\n            }\r\n            { songLink && <iframe width=\"100%\" height=\"35%\" title=\"Youtube Video\" src={ songLink } allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen style={{ marginBottom: 20 }} /> }\r\n            <Audio id={ match.params.id } setIsDeleting={ setIsDeleting } />\r\n            <div className='edit-button-wrapper'>\r\n                <Fab color=\"primary\" aria-label=\"add\" onClick={ openEditModal } >\r\n                    <EditIcon />\r\n                </Fab>\r\n            </div>\r\n            <div className='delete-button-wrapper'>\r\n                <Fab color=\"secondary\" aria-label=\"add\" onClick={ openValidateModal } >\r\n                    <DeleteIcon />\r\n                </Fab>\r\n            </div>\r\n            <Modal \r\n                open={ isEditModalOpen }\r\n                onClose={ closeEditModal }\r\n                className='edit-song-modal'\r\n                closeAfterTransition\r\n                BackdropComponent={ Backdrop }\r\n                BackdropProps={{ timeout: 500 }}\r\n            >\r\n                <Fade in={ isEditModalOpen }>\r\n                    <EditModal />\r\n                </Fade>\r\n            </Modal>\r\n            <Modal \r\n                open={ isValidateModalOpen }\r\n                onClose={ closeValidateModal }\r\n                className='validate-modal'\r\n                closeAfterTransition\r\n                BackdropComponent={ Backdrop }\r\n                BackdropProps={{ timeout: 500 }}\r\n            >\r\n                <Fade in={ isValidateModalOpen }>\r\n                    <div className='validate-modal-content-wrapper'>\r\n                        <h2>Are sure you want to <b>DELETE</b> this Song ?</h2>\r\n                        <div className='validate-modal-button-wrapper'>\r\n                            <Button color='secondary' onClick={ handleDeleteSong }>DELETE</Button>\r\n                            <Button color='primary' onClick={ closeValidateModal }>CANCEL</Button>\r\n                        </div>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n            <Snackbar open={ isSnackbarOpen } anchorOrigin={{ vertical: 'bottom', horizontal: 'left',}} autoHideDuration={ 3000 } onClose={ closeSnackbar }>\r\n                <Alert onClose={ closeSnackbar } severity=\"success\">\r\n                    Edited Song\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongInfo\r\n","import React from 'react'\r\n\r\nfunction NotFound404() {\r\n    return (\r\n        <div style={{ \r\n            backgroundColor: '#111111',\r\n            height: '100vh',\r\n            color: 'white',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        }}>\r\n            <h1>404</h1>\r\n            <h1>Not Found</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound404\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport SongList from './components/SongList';\nimport SongInfo from './components/SongInfo';\nimport NotFound404 from './components/NotFound404';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={SongList}/>\n        <Route path='/songs' exact component={SongList} />\n        <Route path='/song/:id' exact component={SongInfo} />\n        <Route path='*' component={NotFound404} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}